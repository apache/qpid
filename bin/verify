#!/bin/sh
# Driver script to verify installed examples (also used for build tests.)
#
# Usage: verify example_dir [ example_dir ...]
# Where each example_dir must contain a verify sub-script to include.
#
# If $QPIDD is set, run a private QPIDD and use it.
# If $QPID_HOST or $QPID_PORT are set, use them to connect.
#

export QPID_DATA_DIR=

cleanup() {
    test -n "$QPIDD" &&  $QPIDD -q # Private broker
    kill %% > /dev/null 2>&1	# Leftover background jobs
}

trap cleanup EXIT

ARGS="${QPID_HOST:-localhost} $QPID_PORT"

outfile() { echo $1.out; }

fail() { test -n "$*" && echo $* 1>&2 ; FAIL=1; return 1; }

client() { "$@" $ARGS > `outfile $*` || fail; }

clients() { for cmd in "$@"; do client $cmd; done; }

waitfor() { until grep -a -l "$2" $1 >/dev/null 2>&1 ; do sleep 1 ; done ; } 

background() {
    pattern=$1; shift
    out=`outfile $*`
    eval "$* $ARGS > $out &" || { fail; return 1; }
    waitfor $out "$pattern"
}

outputs() {
    wait 2> /dev/null		# Wait for all backgroud processes to complete
    for f in "$@"; do
	{ echo "==== $f"; eval "cat $f"; } >> verify.out || fail
    done
}

verify() {
    FAIL=
    dir=$1
    cd $dir || return 1
    rm -f *.out
    { source ./verify && diff -ac verify.out verify.in ; } || fail
    test -z "$FAIL" && rm -f *.out
    return $FAIL
}

HEX="[a-fA-F0-9]"
remove_uuid() {
    sed "s/$HEX\{8\}-$HEX\{4\}-$HEX\{4\}-$HEX\{4\}-$HEX\{12\}//g" $*
}
remove_uuid64() {
    sed 's/[-A-Za-z0-9_]\{22\}==$//' $*
}

# Start private broker if QPIDD is set.
if [ -n "$QPIDD" ] ; then
    export QPID_PORT=`$QPIDD -dp0` || { echo "Cannot start $QPIDD" ; exit 1; }
    trap "$QPIDD -q" EXIT
fi

for dir in "$@"; do
    echo -n "$dir : "
    if ( verify $dir; ) then echo "PASS";  else echo "FAIL"; RET=1; fi
     done
exit $RET
