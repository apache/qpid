#!/usr/bin/env python

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import optparse
import sys
import re
import socket
import qpid
from threading       import Condition
from qpid.management import managementClient
from qpid.managementdata import Broker
from qpid.peer       import Closed
from qpid.connection import Connection, ConnectionFailed
from qpid.util       import connect
from time            import sleep

class mgmtObject (object):
  """ Generic object that holds the contents of a management object with its
      attributes set as object attributes. """

  def __init__ (self, classKey, timestamps, row):
    self.classKey   = classKey
    self.timestamps = timestamps
    for cell in row:
      setattr (self, cell[0], cell[1])



class BrokerManager:
    def __init__ (self):
        self.dest    = None
        self.src     = None
        self.broker  = None
        self.objects = {}
        self.filter  = None   

    def SetBroker (self, broker):
        self.broker = broker

    def ConnectToBroker (self):
        try:
            self.sessionId = "%s.%d" % (os.uname()[1], os.getpid())
            self.conn     = Connection (connect (self.broker.host, self.broker.port),
                                    username=self.broker.username, password=self.broker.password)
            self.conn.start ()
            self.session  = self.conn.session(self.sessionId)
            self.mclient  = managementClient (self.conn.spec, None, self.configCb, self.instCb)
            self.mchannel = self.mclient.addChannel (self.session)
        except socket.error, e:
            print "Socket Error %s - %s" % (e[0], e[1])
            sys.exit (1)
        except Closed, e:
            print "Connect Failed %d - %s" % (e[0], e[1])
            sys.exit (1)
        except ConnectionFailed, e:
            print "Connect Failed %d - %s" % (e[0], e[1])
            sys.exit(1)

    def setFilter(self,filter):
        self.filter = filter

    def Disconnect (self):
        self.mclient.removeChannel (self.mchannel)
        self.session.close(timeout=10)
        self.conn.close(timeout=10)

    def configCb (self, context, classKey, row, timestamps):
        className = classKey[1]
        if className != "queue":
            return

        obj = mgmtObject (classKey, timestamps, row)
        if obj.id not in self.objects:
            self.objects[obj.id] = (obj.name, None, None)

    def instCb (self, context, classKey, row, timestamps):
        className = classKey[1]
        if className != "queue":
            return

        obj = mgmtObject (classKey, timestamps, row)
        if obj.id not in self.objects:
            return

        (name, first, last) = self.objects[obj.id]
        if first == None:
            self.objects[obj.id] = (name, obj, None)
            return

        if len(self.filter) > 0 :
           match = False
                    
           for x in self.filter:
              if x.match(name):                 
                 match = True
                 break
           if match == False:
              return

        if last == None:
            lastSample = first
        else:
            lastSample = last

        self.objects[obj.id] = (name, first, obj)

        deltaTime   = float (obj.timestamps[0] - lastSample.timestamps[0])
        enqueueRate = float (obj.msgTotalEnqueues - lastSample.msgTotalEnqueues) / (deltaTime / 1000000000.0)
        dequeueRate = float (obj.msgTotalDequeues - lastSample.msgTotalDequeues) / (deltaTime / 1000000000.0)
        print "%-41s%10.2f%10d..%-10d%13.2f%13.2f" % \
            (name, deltaTime / 1000000000, obj.msgDepthLow, obj.msgDepthHigh, enqueueRate, dequeueRate)


    def Display (self):
        self.ConnectToBroker ()
        print "Queue Name                                     Sec       Depth Range          Enq Rate     Deq Rate"
        print "==================================================================================================="
        try:
            while True:
                sleep (1)
        except KeyboardInterrupt:
            pass
        self.Disconnect ()

##
## Main Program
##
def main():
  p = optparse.OptionParser()
  p.add_option('--broker-address','-a', default='localhost' , help='broker-addr is in the form:  [username/password@] hostname | ip-address [:<port>] \n ex:  localhost, 10.1.1.7:10000, broker-host:10000, guest/guest@localhost')
  p.add_option('--filter','-f' ,default=None ,help='a list of comma separated queue names (regex are accepted) to show')

  options, arguments = p.parse_args()

  host = options.broker_address
  filter = []
  if options.filter != None:
    for s in options.filter.split(","):
        filter.append(re.compile(s))

  bm  = BrokerManager ()
  bm.SetBroker (Broker (host))
  bm.setFilter(filter)
  bm.Display()
 
if __name__ == '__main__':
  main()

