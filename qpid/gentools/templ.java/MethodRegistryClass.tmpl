&{MainRegistry.java}
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

/*
 * This file is auto-generated by ${GENERATOR} - do not modify.
 * Supported AMQP versions:
%{VLIST} *   ${major}-${minor}
 */
 
package org.apache.qpid.framing;

import java.util.HashMap;
import java.lang.reflect.Constructor;
import org.apache.log4j.Logger;
import org.apache.mina.common.ByteBuffer;

class MainRegistry
{
	private static final HashMap<Long, AMQMethodBodyInstanceFactory> classIDMethodIDVersionBodyMap = new HashMap<Long, AMQMethodBodyInstanceFactory>();

	
    private static final Logger _log = Logger.getLogger(MainRegistry.class);
	
    static
    {
%{CLIST}	${reg_map_put_method}
    }
    
    public static AMQMethodBody get(short classID, short methodID, byte major, byte minor, ByteBuffer in, long size)
        throws AMQFrameDecodingException
    {
        AMQMethodBodyInstanceFactory bodyFactory = classIDMethodIDVersionBodyMap.get(createMapKey(classID,methodID,major,minor));
        if (bodyFactory == null)
        {
            throw new AMQFrameDecodingException(_log,
                "Unable to find a suitable decoder for class " + classID + " and method " +
                methodID + " in AMQP version " + major + "-" + minor + ".");
        }
        return bodyFactory.newInstance(major, minor, in, size);

	    
    }
    
	private static void registerMethod(short classID, short methodID, byte major, byte minor, AMQMethodBodyInstanceFactory instanceFactory )
	{
        classIDMethodIDVersionBodyMap.put(createMapKey(classID,methodID,major,minor), instanceFactory);
    }

    
    private static Long createMapKey(short classID, short methodID, byte major, byte minor)
    {
    	/**
         *	Mapping of 4 components into a guaranteed unique key:
         *  MSB                                     LSB
         *  +----+----+----+----+----+----+-----+-----+
         *  |    0    | classID |methodID |major|minor|
         *  +----+----+----+----+----+----+-----+-----+
         */
    	return new Long(((long)classID << 32) + ((long)methodID << 16) + ((long)major << 8) + minor);
    }

}
